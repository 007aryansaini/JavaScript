-->  There are three types of functions in javascript : declaration, expression and arrow function.
     The expression and the arrow function cannot be used before they are declared. We can only use them below they are declared.
    
    
-->  We can set default parameters in the function if we do not defined the default parameter then we we do not pass that value as a parameter while 
     calling then they will be undefined.
    
    
-->  Before ES6 they default values are set by using short circuiting and in ES6 we can set default value by setting the default values in the parameter
     list while defining the function and we can even use the parameters that are declared before that parameter.
    
-->  We cannot skip the parameters while calling the function although we can do this by setting that parameter that we want to skip to undefined while
     calling the function But ofcourse that is of no use.
     
--> Call by value and call by refrence : When we pass a primitive type then a copy of that parameter is passed in the function but when we pass in the
                                         parameter through refrence then only the refrence to that is copied and it will still point to that same object
                                         so we must be very careful while dealing with call by refrence if we change some value then it will change the 
                                         value of that object.
                                         
              #Note : JS does not actually have pass by refrence although in objects it seems like pass by refrence but actually it's pass by value
                      as the value of the refrence is copied.
                      
                      
--> First class and Higher order functions : 

     . Functions are another type of object in javascript and they are treated as values and we can do a bunch of properties like storing them in a 
       variable and we can do a bunch of properties that we can do on an object are first order function.
       
     . Higher Order function : The functions which recieves a function as an argument or a function that returns another function or both are Higher
                                order functions. And this is only possible beacuse of First-Class functions.
         
         
       --------------------------------------  CALL APPLY BIND --------------------------------------------------
       
         
         
--> IMP : In a regular function call the this keyword is set to undefined. and if we want to set the value of this keyword then we have 3 functions
          call, apply and bind method.
          
          . IF we apply CALL method to any function then the first argument will be the object on which we want to set the this keyword and rest of the
            parameters as same as the function parameters.
          
          . The APPLY method does the same thing as the call method but it does not take the arguments individually of the original function instead it 
            takes an array of the arguments.
            
          . Bind : It also allow us to mannualy set the this keyword while a function call. It does not immediately call the function instead it returns 
                   a new function where the this keyword is bound. BAsically we create a new function and the function which was returned by bind method 
                   set the this key to which we specify and we can set the default signatures too in the bind method.
                   
            #NOTE : In event handlers the this keyword is attached to the element to which the event handler is attached.
                    Sp, we use bind method when we call an function through event handler and we uses the this keyword. 
                    
                    
                    
--> Immediately Invocked function expression ( IIFE ) : 
    
          This is the function that we want to execute only once. This can be done by encapsulating the function in parenthesis and using function expression
          without assigning any name to it and same for arrow function.
        
(function () {
  console.log('This function will never run again.');
})();

(() => {
  console.log('This arrow function will never run again.');
})();




--> Closures : A closure makes a function remember all the variables that existed at the function birthplace essentially.
              A function always have access to the variable environment of the execution context in which it was created.
              
              
              see gain the video.
                
